// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

// Package export provides interfaces and types shared by other packages that
// handle export of auto instrumentation generated telemetry. Standard types
// that implement the included interfaces are found in sub-packages.
package export

import (
	"sync"
	"sync/atomic"

	"go.opentelemetry.io/collector/pdata/pcommon"
	"go.opentelemetry.io/collector/pdata/plog"
	"go.opentelemetry.io/collector/pdata/pmetric"
	"go.opentelemetry.io/collector/pdata/ptrace"
)

// Handler handles telemetry generated by instrumentation.
type Handler interface {
	Handle(*Telemetry)
}

// Telemetry is the measured data generated by instrumentation probes for a
// single scope.
type Telemetry struct {
	scope     pcommon.InstrumentationScope
	scopeOnce oneAndDone
	schemaURL string

	spans     ptrace.SpanSlice
	spansOnce oneAndDone

	metrics     pmetric.MetricSlice
	metricsOnce oneAndDone

	logs     plog.LogRecordSlice
	logsOnce oneAndDone
}

// SchemaURL returns the schema URL defining the telemetry schema.
func (t *Telemetry) SchemaURL() string { return t.schemaURL }

// SetSchemaURL sets the schema URL for the telemetry.
func (t *Telemetry) SetSchemaURL(url string) { t.schemaURL = url }

// HasScope returns if the telemetry scope has been set.
func (t *Telemetry) HasScope() bool {
	return t.scopeOnce.Done()
}

// Scope returns the telemetry scope.
func (t *Telemetry) Scope() pcommon.InstrumentationScope {
	t.scopeOnce.Do(func() { t.scope = pcommon.NewInstrumentationScope() })
	return t.scope
}

// HasSpans returns if the telemetry contains any trace telemetry.
func (t *Telemetry) HasSpans() bool {
	return t.spansOnce.Done() && t.spans.Len() > 0
}

// Spans returns the trace telemetry.
func (t *Telemetry) Spans() ptrace.SpanSlice {
	t.spansOnce.Do(func() { t.spans = ptrace.NewSpanSlice() })
	return t.spans
}

// HasMetrics returns if the telemetry contains any metric telemetry.
func (t *Telemetry) HasMetrics() bool {
	return t.metricsOnce.Done() && t.metrics.Len() > 0
}

// Metrics returns the metric telemetry.
func (t *Telemetry) Metrics() pmetric.MetricSlice {
	t.metricsOnce.Do(func() { t.metrics = pmetric.NewMetricSlice() })
	return t.metrics
}

// HasLogs returns if the telemetry contains any log telemetry.
func (t *Telemetry) HasLogs() bool {
	return t.logsOnce.Done() && t.logs.Len() > 0
}

// Logs returns the log telemetry.
func (t *Telemetry) Logs() plog.LogRecordSlice {
	t.logsOnce.Do(func() { t.logs = plog.NewLogRecordSlice() })
	return t.logs
}

type oneAndDone struct {
	once sync.Once
	done atomic.Bool
}

func (o *oneAndDone) Do(f func()) {
	o.once.Do(func() {
		f()
		o.done.Store(true)
	})
}

func (o *oneAndDone) Done() bool { return o.done.Load() }
