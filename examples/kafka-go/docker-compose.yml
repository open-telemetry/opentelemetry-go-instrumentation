networks:
  default:
    name: roll
    driver: bridge

volumes:
  debugfs:
    driver: local
    driver_opts:
      type: debugfs
      device: debugfs
      o: uid=0,gid=0,mode=755

services:
  broker:
    image: apache/kafka:3.9.0@sha256:fbc7d7c428e3755cf36518d4976596002477e4c052d1f80b5b9eafd06d0fff2f
    container_name: broker
    restart: on-failure:3
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://broker:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@broker:29093
      KAFKA_LISTENERS: PLAINTEXT://broker:29092,CONTROLLER://broker:29093,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
    command: >
      /etc/kafka/docker/run &
      sleep 3
      /opt/kafka/bin/kafka-topics.sh --create \
          --topic topic1 \
          --partitions 1 \
          --replication-factor 1 \
          --if-not-exists \
          --bootstrap-server broker:9092
      /opt/kafka/bin/kafka-topics.sh --create \
          --topic topic2 \
          --partitions 1 \
          --replication-factor 1 \
          --if-not-exists \
          --bootstrap-server broker:9092
    healthcheck:
      test: ["CMD", "/opt/kafka/bin/kafka-topics.sh", "--list", "--bootstrap-server", "broker:9092"]
      interval: 5s
      timeout: 10s
      retries: 5
  
  kafkaproducer:
    depends_on:
      broker:
        condition: service_healthy
    build:
      context: ./producer
      dockerfile: ../Dockerfile
      args:
        BINARY_NAME: producer
    pid: "host"
    ports:
      - "8080:8080"
    volumes:
      - /proc:/host/proc
    container_name: kafkaproducer

  kafkaconsumer:
    depends_on:
      broker:
        condition: service_healthy
    build:
      context: ./consumer
      dockerfile: ../Dockerfile
      args:
        BINARY_NAME: consumer
    pid: "host"
    volumes:
      - /proc:/host/proc
    container_name: kafkaconsumer

  go-auto-producer:
    depends_on:
      - kafkaproducer
    build:
      context: ../..
      dockerfile: Dockerfile
    privileged: true
    pid: "host"
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4318
      - OTEL_GO_AUTO_TARGET_EXE=/app/producer
      - OTEL_SERVICE_NAME=kafkaproducer
      - OTEL_PROPAGATORS=tracecontext,baggage
      - OTEL_GO_AUTO_SHOW_VERIFIER_LOG=true
    volumes:
      - /proc:/host/proc
      - debugfs:/sys/kernel/debug
    command: ["/otel-go-instrumentation", "-global-impl"]
    container_name: auto-producer

  go-auto-consumer:
    depends_on:
      - kafkaconsumer
    build:
      context: ../..
      dockerfile: Dockerfile
    privileged: true
    pid: "host"
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4318
      - OTEL_GO_AUTO_TARGET_EXE=/app/consumer
      - OTEL_SERVICE_NAME=kafkaconsumer
      - OTEL_PROPAGATORS=tracecontext,baggage
      - OTEL_GO_AUTO_SHOW_VERIFIER_LOG=true
    volumes:
      - /proc:/host/proc
      - debugfs:/sys/kernel/debug
    command: ["/otel-go-instrumentation", "-global-impl"]
    container_name: auto-consumer

  jaeger:
    image: jaegertracing/all-in-one:1.68.0@sha256:6279882637ae03e70f519965d2ba5ca84cb785f4baf4f0d7237e827a37c33a42
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - LOG_LEVEL=debug
    deploy:
      resources:
        limits:
          memory: 300M
    restart: unless-stopped
